---
// Create an object with translations of the page.
// A translation is identified by its 'reference' frontmatter value: pages that have the same value are considered translations.
// If there are translations of the page, the TranslationsBanner is shown.
// Because astro.glob() and getCollections are only available inside .astro files, the logic can't be easily moved to utility function.
// The benefit of having the logic inside this component is that the translations only need to be searched once for all the places where they are used (head and TranslationsBanner).

import { getLocaleFromUrl} from '@src/i18n/utils';
import { uiStrings } from '@src/i18n/ui';
import { getCollection } from 'astro:content';
import Html from "./Html.astro";
import TranslationsBanner from "@components/TranslationsBanner.astro";
import TranslationLinks from "@components/TranslationLinks.astro";
import Header from "@components/Header.astro";

const
	{frontmatter, collection} = Astro.props,
	reference:string = frontmatter.reference;

let translationsAvailable = []
let translationLinks:[{path: string, locale: string, label: string}?] = []

if (reference){
	if (collection === 'pages'){
		// The current page is not part of a collection
		const allPages = await Astro.glob('../pages/**/*.{md,mdx}')
		translationsAvailable = allPages
			.filter(({ frontmatter }) => {
				return frontmatter.reference !== null && frontmatter.reference === reference
			})
			.filter(page => {
				return getLocaleFromUrl(page.url) !== Astro.currentLocale
			})
		for (const translation of translationsAvailable){
			const locale = getLocaleFromUrl(translation.url)
			const link = {
				path: translation.url || '/',
				locale: locale,
				label: uiStrings[locale][Astro.currentLocale]
			}
			translationLinks.push(link)
		}
	}
	else{
		// The current page is part of a collection
		const filteredEntries = await getCollection(collection, (entry) => {
			return entry.data.reference === reference
		});
		const translationsSlugs = filteredEntries
			.filter(function(entry){ return getLocaleFromUrl(entry.slug) !== Astro.currentLocale })
			.map(entry => (entry.slug))

		for (const slug of translationsSlugs){
			const locale = getLocaleFromUrl(slug)
			const link = {
				path: `/${collection}/${slug}`,
				locale: locale,
				label: uiStrings[locale][Astro.currentLocale]
			}
			translationLinks.push(link)
		}
	}
}
---

<Html frontmatter={frontmatter}>
	{translationLinks.map((translation) => ( 
		<link rel="alternate" hreflang={translation.locale} href={translation.path} slot="head" />
	))}
</Html>
  <Header>
		{translationLinks.length > 0 &&
			<TranslationsBanner>
				<TranslationLinks {translationLinks} />
			</TranslationsBanner>
		}
	</Header>
	<slot/>
		{translationLinks.length > 0 &&
			<footer>
				<TranslationLinks {translationLinks} />
			</footer>
		}
</Html>