---
import { getLocaleFromUrl } from '../i18n/utils';
import { uiStrings } from '../i18n/ui';
import { getCollection } from 'astro:content';

const pageTranslationsAvailableIn = `${uiStrings.pageTranslationsAvailableIn[Astro.currentLocale]} `
const {reference} = Astro.props

let translationsAvailable:Array<object> = []
let translationLinks:Array<object> = []

if (reference){
	const translatedPosts = await getCollection('blog', ({ data }) => {
		return data.reference ===  reference;
	});
	const allPages = await Astro.glob('../pages/**/*.md')
	translationsAvailable = allPages
    .filter(({ frontmatter }) => {
			return frontmatter.reference !== null && frontmatter.reference === reference
		})
		.filter(page => {
			return getLocaleFromUrl(page.url) !== Astro.currentLocale
		})
	
	for (const translation of translationsAvailable){
		const language = getLocaleFromUrl(translation.url)
		const link = {
			path: translation.url,
			language: language,
			label: uiStrings[Astro.currentLocale][language]
		}
		translationLinks.push(link)
	}
}

---
{translationLinks &&
	<aside>
		<p>
			{pageTranslationsAvailableIn} {translationLinks.map((translation, index) => (
				<a href="{translation.path}" hreflang="{translation.language}">
					{translation.label}
				</a>
				<span>{index < translationLinks.length - 1 ?
					', ' : ''
				}</span>
			))}.
		</p>
	</aside>
}
